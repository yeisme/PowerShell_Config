using namespace System.Management.Automation

Register-ArgumentCompleter -CommandName ctest -ScriptBlock {
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameters)

    if ($commandName.StartsWith('-')) {
        $completions = @(
            [CompletionResult]::new('--preset ', '--preset ', [CompletionResultType]::ParameterName, 'Read arguments from a test preset.'),
            [CompletionResult]::new('--list-presets ', '--list-presets ', [CompletionResultType]::ParameterName, 'List available test presets.'),
            [CompletionResult]::new('-C ', '-C ', [CompletionResultType]::ParameterName, 'Choose configuration to test.'),
            [CompletionResult]::new('--progress ', '--progress', [CompletionResultType]::ParameterName, 'Enable short progress output from tests.'),
            [CompletionResult]::new('-V', '-V', [CompletionResultType]::ParameterName, 'Enable verbose output from tests.'),
            [CompletionResult]::new('-VV', '-VV', [CompletionResultType]::ParameterName, 'Enable more verbose output from tests.'),
            [CompletionResult]::new('--debug ', '--debug', [CompletionResultType]::ParameterName, 'Displaying more verbose internals of CTest.'),
            [CompletionResult]::new('--output-on-failure ', '--output-on-failure', [CompletionResultType]::ParameterName, 'Output anything outputted by the test program if the test should fail.'),
            [CompletionResult]::new('--stop-on-failure ', '--stop-on-failure', [CompletionResultType]::ParameterName, 'Stop running the tests after one has failed.'),
            [CompletionResult]::new('--test-output-size-passed=', '--test-output-size-passed=', [CompletionResultType]::ParameterName, 'Limit the output for passed tests to <size> bytes'),
            [CompletionResult]::new('--test-output-size-failed=', '--test-output-size-failed=', [CompletionResultType]::ParameterName, 'Limit the output for failed tests to <size> bytes'),
            [CompletionResult]::new('--test-output-truncation=', '--test-output-truncation=', [CompletionResultType]::ParameterName, 'Truncate "tail" (default), "middle" or "head" of test output once maximum output size is reached'),
            [CompletionResult]::new('-F', '-F', [CompletionResultType]::ParameterName, 'Enable failover.'),
            [CompletionResult]::new('-j ', '-j ', [CompletionResultType]::ParameterName, 'Run tests in parallel, optionally limited to a given level of parallelism.'),
            [CompletionResult]::new('--parallel ', '--parallel', [CompletionResultType]::ParameterName, 'Run tests in parallel, optionally limited to a given level of parallelism.'),
            [CompletionResult]::new('-Q', '-Q', [CompletionResultType]::ParameterName, 'Make ctest quiet.'),
            [CompletionResult]::new('-O ', '-O ', [CompletionResultType]::ParameterName, 'Output to log file'),
            [CompletionResult]::new('--output-log=', '--output-log=', [CompletionResultType]::ParameterName, 'Output to log file'),
            [CompletionResult]::new('--output-junit=', '--output-junit=', [CompletionResultType]::ParameterName, 'Output test results to JUnit XML file.'),
            [CompletionResult]::new('-N', '-N', [CompletionResultType]::ParameterName, 'Disable actual execution of tests. The optional "format" defines the format of the test information and can be "human" for the current text format or "json-v1" for json format. Defaults to "human".'),
            [CompletionResult]::new('-L ', '-L ', [CompletionResultType]::ParameterName, 'Run tests with labels matching regular expression. With multiple -L, run tests where each regular expression matches at least one label.'),
            [CompletionResult]::new('--label-regex=', '--label-regex=', [CompletionResultType]::ParameterName, 'Run tests with labels matching regular expression. With multiple --label-regex, run tests where each regular expression matches at least one label.'),
            [CompletionResult]::new('-R ', '-R ', [CompletionResultType]::ParameterName, 'Run tests matching regular expression.'),
            [CompletionResult]::new('--tests-regex=', '--tests-regex=', [CompletionResultType]::ParameterName, 'Run tests matching regular expression.'),
            [CompletionResult]::new('-E ', '-E ', [CompletionResultType]::ParameterName, 'Exclude tests matching regular expression.'),
            [CompletionResult]::new('--exclude-regex=', '--exclude-regex=', [CompletionResultType]::ParameterName, 'Exclude tests matching regular expression.'),
            [CompletionResult]::new('-LE ', '-LE ', [CompletionResultType]::ParameterName, 'Exclude tests with labels matching regular expression. With multiple -LE, exclude tests where each regular expression matches at least one label.'),
            [CompletionResult]::new('--label-exclude=', '--label-exclude=', [CompletionResultType]::ParameterName, 'Exclude tests with labels matching regular expression. With multiple --label-exclude, exclude tests where each regular expression matches at least one label.'),
            [CompletionResult]::new('-FA ', '-FA ', [CompletionResultType]::ParameterName, 'Do not automatically add any tests for fixtures matching regular expression.'),
            [CompletionResult]::new('--fixture-exclude-any=', '--fixture-exclude-any=', [CompletionResultType]::ParameterName, 'Do not automatically add any tests for fixtures matching regular expression.'),
            [CompletionResult]::new('-FS ', '-FS ', [CompletionResultType]::ParameterName, 'Do not automatically add setup tests for fixtures matching regular expression.'),
            [CompletionResult]::new('--fixture-exclude-setup=', '--fixture-exclude-setup=', [CompletionResultType]::ParameterName, 'Do not automatically add setup tests for fixtures matching regular expression.'),
            [CompletionResult]::new('-FC ', '-FC ', [CompletionResultType]::ParameterName, 'Do not automatically add cleanup tests for fixtures matching regular expression.'),
            [CompletionResult]::new('--fixture-exclude-cleanup=', '--fixture-exclude-cleanup=', [CompletionResultType]::ParameterName, 'Do not automatically add cleanup tests for fixtures matching regular expression.'),
            [CompletionResult]::new('-D ', '-D ', [CompletionResultType]::ParameterName, 'Execute dashboard test'),
            [CompletionResult]::new('--dashboard=', '--dashboard=', [CompletionResultType]::ParameterName, 'Execute dashboard test'),
            [CompletionResult]::new('-M ', '-M ', [CompletionResultType]::ParameterName, 'Sets the model for a dashboard'),
            [CompletionResult]::new('--test-model=', '--test-model=', [CompletionResultType]::ParameterName, 'Sets the model for a dashboard'),
            [CompletionResult]::new('-T ', '-T ', [CompletionResultType]::ParameterName, 'Sets the dashboard action to perform'),
            [CompletionResult]::new('--test-action=', '--test-action=', [CompletionResultType]::ParameterName, 'Sets the dashboard action to perform'),
            [CompletionResult]::new('--group ', '--group ', [CompletionResultType]::ParameterName, 'Specify what build group on the dashboard you would like to submit results to.'),
            [CompletionResult]::new('-S ', '-S ', [CompletionResultType]::ParameterName, 'Execute a dashboard for a configuration'),
            [CompletionResult]::new('--script=', '--script=', [CompletionResultType]::ParameterName, 'Execute a dashboard for a configuration'),
            [CompletionResult]::new('--test-action=', '--test-action=', [CompletionResultType]::ParameterName, 'Sets the dashboard action to perform.')
            [CompletionResult]::new('-SP ', '-SP ', [CompletionResultType]::ParameterName, 'Execute a dashboard for a configuration'),
            [CompletionResult]::new('--script-new-process=', '--script-new-process=', [CompletionResultType]::ParameterName, 'Execute a dashboard for a configuration'),
            [CompletionResult]::new('-A ', '-A ', [CompletionResultType]::ParameterName, 'Add a notes file with submission'),
            [CompletionResult]::new('--add-notes=', '--add-notes=', [CompletionResultType]::ParameterName, 'Add a notes file with submission'),
            [CompletionResult]::new('-I ', '-I ', [CompletionResultType]::ParameterName, 'Run a specific number of tests by number.'),
            [CompletionResult]::new('--tests-information=', '--tests-information=', [CompletionResultType]::ParameterName, 'Run a specific number of tests by number.'),
            [CompletionResult]::new('-U', '-U', [CompletionResultType]::ParameterName, 'Take the Union of -I and -R'),
            [CompletionResult]::new('--union', '--union', [CompletionResultType]::ParameterName, 'Take the Union of -I and -R'),
            [CompletionResult]::new('--rerun-failed', '--rerun-failed', [CompletionResultType]::ParameterName, 'Run only the tests that failed previously'),
            [CompletionResult]::new('--rerun-all-failed', '--rerun-all-failed', [CompletionResultType]::ParameterName, 'Run all tests that failed previously'),
            [CompletionResult]::new('--tests-from-file=', '--tests-from-file=', [CompletionResultType]::ParameterName, 'Run the tests listed in the given file'),
            [CompletionResult]::new('--exclude-from-file=', '--exclude-from-file=', [CompletionResultType]::ParameterName, 'Run tests except those listed in the given file'),
            [CompletionResult]::new('--repeat until-fail=', '--repeat until-fail=', [CompletionResultType]::ParameterName, 'Require each test to run <n> times without failing in order to pass'),
            [CompletionResult]::new('--repeat-until-fail=', '--repeat-until-fail=', [CompletionResultType]::ParameterName, 'Require each test to run <n> times without failing in order to pass'),
            [CompletionResult]::new('--repeat until-pass=', '--repeat until-pass=', [CompletionResultType]::ParameterName, 'Allow each test to run up to <n> times in order to pass'),
            [CompletionResult]::new('--repeat-until-pass=', '--repeat-until-pass=', [CompletionResultType]::ParameterName, 'Allow each test to run up to <n> times in order to pass'),
            [CompletionResult]::new('--repeat after-timeout=', '--repeat after-timeout=', [CompletionResultType]::ParameterName, 'Allow each test to run up to <n> times if it times out'),
            [CompletionResult]::new('--max-width=', '--max-width=', [CompletionResultType]::ParameterName, 'Set the max width for a test name to output'),
            [CompletionResult]::new('--interactive-debug-mode=', '--interactive-debug-mode=', [CompletionResultType]::ParameterName, 'Set the interactive mode to 0 or 1.'),
            [CompletionResult]::new('--resource-spec-file=', '--resource-spec-file=', [CompletionResultType]::ParameterName, 'Set the resource spec file to use.'),
            [CompletionResult]::new('--no-label-summary', '--no-label-summary', [CompletionResultType]::ParameterName, 'Disable timing summary information for labels.'),
            [CompletionResult]::new('--no-subproject-summary', '--no-subproject-summary', [CompletionResultType]::ParameterName, 'Disable timing summary information for subprojects.'),
            [CompletionResult]::new('--test-dir=', '--test-dir=', [CompletionResultType]::ParameterName, 'Specify the directory in which to look for tests.'),
            [CompletionResult]::new('--build-and-test', '--build-and-test', [CompletionResultType]::ParameterName, 'Configure, build and run a test.'),
            [CompletionResult]::new('--build-target=', '--build-target=', [CompletionResultType]::ParameterName, 'Specify a specific target to build.'),
            [CompletionResult]::new('--build-nocmake', '--build-nocmake', [CompletionResultType]::ParameterName, 'Run the build without running cmake first.'),
            [CompletionResult]::new('--build-run-dir=', '--build-run-dir=', [CompletionResultType]::ParameterName, 'Specify directory to run programs from.'),
            [CompletionResult]::new('--build-two-config', '--build-two-config', [CompletionResultType]::ParameterName, 'Run CMake twice'),
            [CompletionResult]::new('--build-exe-dir=', '--build-exe-dir=', [CompletionResultType]::ParameterName, 'Specify the directory for the executable.'),
            [CompletionResult]::new('--build-generator=', '--build-generator=', [CompletionResultType]::ParameterName, 'Specify the generator to use.'),
            [CompletionResult]::new('--build-generator-platform=', '--build-generator-platform=', [CompletionResultType]::ParameterName, 'Specify the generator-specific platform.'),
            [CompletionResult]::new('--build-generator-toolset=', '--build-generator-toolset=', [CompletionResultType]::ParameterName, 'Specify the generator-specific toolset.'),
            [CompletionResult]::new('--build-project=', '--build-project=', [CompletionResultType]::ParameterName, 'Specify the name of the project to build.'),
            [CompletionResult]::new('--build-makeprogram=', '--build-makeprogram=', [CompletionResultType]::ParameterName, 'Specify the make program to use.'),
            [CompletionResult]::new('--build-noclean', '--build-noclean', [CompletionResultType]::ParameterName, 'Skip the make clean step.'),
            [CompletionResult]::new('--build-config-sample=', '--build-config-sample=', [CompletionResultType]::ParameterName, 'A sample executable to use to determine the configuration'),
            [CompletionResult]::new('--build-options=', '--build-options=', [CompletionResultType]::ParameterName, 'Add extra options to the build step.'),
            [CompletionResult]::new('--build-verbose', '--build-verbose', [CompletionResultType]::ParameterName, 'Enable verbose output during the build process.'),
            [CompletionResult]::new('--build-skip-tests', '--build-skip-tests', [CompletionResultType]::ParameterName, 'Skip running tests after the build.'),
            [CompletionResult]::new('--test-command=', '--test-command=', [CompletionResultType]::ParameterName, 'The test to run with the --build-and-test option.'),
            [CompletionResult]::new('--test-timeout=', '--test-timeout=', [CompletionResultType]::ParameterName, 'The time limit in seconds, internal use only.'),
            [CompletionResult]::new('--test-load=', '--test-load=', [CompletionResultType]::ParameterName, 'CPU load threshold for starting new parallel tests.'),
            [CompletionResult]::new('--tomorrow-tag', '--tomorrow-tag', [CompletionResultType]::ParameterName, 'Nightly or experimental starts with next day tag.'),
            [CompletionResult]::new('--overwrite', '--overwrite', [CompletionResultType]::ParameterName, 'Overwrite CTest configuration option.'),
            [CompletionResult]::new('--extra-submit=', '--extra-submit=', [CompletionResultType]::ParameterName, 'Submit extra files to the dashboard.'),
            [CompletionResult]::new('--http-header=', '--http-header=', [CompletionResultType]::ParameterName, 'Append HTTP header when submitting'),
            [CompletionResult]::new('--force-new-ctest-process', '--force-new-ctest-process', [CompletionResultType]::ParameterName, 'Run child CTest instances as new processes'),
            [CompletionResult]::new('--schedule-random', '--schedule-random', [CompletionResultType]::ParameterName, 'Use a random order for scheduling tests'),
            [CompletionResult]::new('--submit-index', '--submit-index', [CompletionResultType]::ParameterName, 'Submit individual dashboard tests with specific index'),
            [CompletionResult]::new('--timeout=', '--timeout=', [CompletionResultType]::ParameterName, 'Set the default test timeout.'),
            [CompletionResult]::new('--stop-time=', '--stop-time=', [CompletionResultType]::ParameterName, 'Set a time at which all tests should stop running.'),
            [CompletionResult]::new('--http1.0', '--http1.0', [CompletionResultType]::ParameterName, 'Submit using HTTP 1.0.'),
            [CompletionResult]::new('--no-compress-output', '--no-compress-output', [CompletionResultType]::ParameterName, 'Do not compress test output when submitting.'),
            [CompletionResult]::new('--print-labels', '--print-labels', [CompletionResultType]::ParameterName, 'Print all available test labels.'),
            [CompletionResult]::new('--no-tests=', '--no-tests=', [CompletionResultType]::ParameterName, 'Regard no tests found either as "error" or "ignore" it.')
        )
        return $completions.Where{ $_.CompletionText.StartsWith($commandName) }
    }
}
